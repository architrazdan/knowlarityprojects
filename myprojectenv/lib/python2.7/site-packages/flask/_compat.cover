       # -*- coding: utf-8 -*-
       """
           flask._compat
           ~~~~~~~~~~~~~
       
           Some py2/py3 compatibility support based on a stripped down
           version of six so we don't have to depend on a specific version
           of it.
       
           :copyright: (c) 2013 by Armin Ronacher.
           :license: BSD, see LICENSE for more details.
    1: """
    1: import sys
       
    1: PY2 = sys.version_info[0] == 2
    1: _identity = lambda x: x
       
       
    1: if not PY2:
           text_type = str
           string_types = (str,)
           integer_types = (int, )
       
           iterkeys = lambda d: iter(d.keys())
           itervalues = lambda d: iter(d.values())
           iteritems = lambda d: iter(d.items())
       
           from io import StringIO
       
           def reraise(tp, value, tb=None):
               if value.__traceback__ is not tb:
                   raise value.with_traceback(tb)
               raise value
       
           implements_to_string = _identity
       
       else:
    1:     text_type = unicode
    1:     string_types = (str, unicode)
    1:     integer_types = (int, long)
       
    1:     iterkeys = lambda d: d.iterkeys()
    1:     itervalues = lambda d: d.itervalues()
    1:     iteritems = lambda d: d.iteritems()
       
    1:     from cStringIO import StringIO
       
    1:     exec('def reraise(tp, value, tb=None):\n raise tp, value, tb')
       
    1:     def implements_to_string(cls):
    1:         cls.__unicode__ = cls.__str__
    1:         cls.__str__ = lambda x: x.__unicode__().encode('utf-8')
    1:         return cls
       
       
    1: def with_metaclass(meta, *bases):
           # This requires a bit of explanation: the basic idea is to make a
           # dummy metaclass for one level of class instantiation that replaces
           # itself with the actual metaclass.  Because of internal type checks
           # we also need to make sure that we downgrade the custom metaclass
           # for one level to something closer to type (that's why __call__ and
           # __init__ comes back from type etc.).
           #
           # This has the advantage over six.with_metaclass in that it does not
           # introduce dummy classes into the final MRO.
           class metaclass(meta):
               __call__ = type.__call__
               __init__ = type.__init__
               def __new__(cls, name, this_bases, d):
                   if this_bases is None:
                       return type.__new__(cls, name, (), d)
                   return meta(name, bases, d)
           return metaclass('temporary_class', None, {})
