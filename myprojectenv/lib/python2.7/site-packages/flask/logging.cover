       # -*- coding: utf-8 -*-
       """
           flask.logging
           ~~~~~~~~~~~~~
       
           Implements the logging support for Flask.
       
           :copyright: (c) 2011 by Armin Ronacher.
           :license: BSD, see LICENSE for more details.
    1: """
       
    1: from __future__ import absolute_import
       
    1: from logging import getLogger, StreamHandler, Formatter, getLoggerClass, DEBUG
       
       
    1: def create_logger(app):
           """Creates a logger for the given application.  This logger works
           similar to a regular Python logger but changes the effective logging
           level based on the application's debug flag.  Furthermore this
           function also removes all attached handlers in case there was a
           logger with the log name before.
           """
    1:     Logger = getLoggerClass()
       
    2:     class DebugLogger(Logger):
    1:         def getEffectiveLevel(x):
   28:             if x.level == 0 and app.debug:
                       return DEBUG
   28:             return Logger.getEffectiveLevel(x)
       
    2:     class DebugHandler(StreamHandler):
    1:         def emit(x, record):
   28:             StreamHandler.emit(x, record) if app.debug else None
       
    1:     handler = DebugHandler()
    1:     handler.setLevel(DEBUG)
    1:     handler.setFormatter(Formatter(app.debug_log_format))
    1:     logger = getLogger(app.logger_name)
           # just in case that was not a new logger, get rid of all the handlers
           # already attached to it.
    1:     del logger.handlers[:]
    1:     logger.__class__ = DebugLogger
    1:     logger.addHandler(handler)
    1:     return logger
