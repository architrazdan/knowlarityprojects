       #
       # Secret Labs' Regular Expression Engine
       #
       # convert template to internal format
       #
       # Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.
       #
       # See the sre.py file for information on usage and redistribution.
       #
       
       """Internal support module for sre"""
       
       import _sre, sys
       import sre_parse
       from sre_constants import *
       
       assert _sre.MAGIC == MAGIC, "SRE module mismatch"
       
       if _sre.CODESIZE == 2:
           MAXCODE = 65535
       else:
           MAXCODE = 0xFFFFFFFFL
       
       def _identityfunction(x):
  600:     return x
       
       _LITERAL_CODES = set([LITERAL, NOT_LITERAL])
       _REPEATING_CODES = set([REPEAT, MIN_REPEAT, MAX_REPEAT])
       _SUCCESS_CODES = set([SUCCESS, FAILURE])
       _ASSERT_CODES = set([ASSERT, ASSERT_NOT])
       
       def _compile(code, pattern, flags):
           # internal: compile a (sub)pattern
  541:     emit = code.append
  541:     _len = len
  541:     LITERAL_CODES = _LITERAL_CODES
  541:     REPEATING_CODES = _REPEATING_CODES
  541:     SUCCESS_CODES = _SUCCESS_CODES
  541:     ASSERT_CODES = _ASSERT_CODES
 1501:     for op, av in pattern:
  960:         if op in LITERAL_CODES:
  274:             if flags & SRE_FLAG_IGNORECASE:
   51:                 emit(OPCODES[OP_IGNORE[op]])
   51:                 emit(_sre.getlower(av, flags))
                   else:
  223:                 emit(OPCODES[op])
  223:                 emit(av)
  686:         elif op is IN:
  219:             if flags & SRE_FLAG_IGNORECASE:
   16:                 emit(OPCODES[OP_IGNORE[op]])
   16:                 def fixup(literal, flags=flags):
   36:                     return _sre.getlower(literal, flags)
                   else:
  203:                 emit(OPCODES[op])
  203:                 fixup = _identityfunction
  219:             skip = _len(code); emit(0)
  219:             _compile_charset(av, flags, code, fixup)
  219:             code[skip] = _len(code) - skip
  467:         elif op is ANY:
   23:             if flags & SRE_FLAG_DOTALL:
    3:                 emit(OPCODES[ANY_ALL])
                   else:
   20:                 emit(OPCODES[ANY])
  444:         elif op in REPEATING_CODES:
  219:             if flags & SRE_FLAG_TEMPLATE:
                       raise error, "internal: unsupported template operator"
                       emit(OPCODES[REPEAT])
                       skip = _len(code); emit(0)
                       emit(av[0])
                       emit(av[1])
                       _compile(code, av[2], flags)
                       emit(OPCODES[SUCCESS])
                       code[skip] = _len(code) - skip
  219:             elif _simple(av) and op is not REPEAT:
  171:                 if op is MAX_REPEAT:
  158:                     emit(OPCODES[REPEAT_ONE])
                       else:
   13:                     emit(OPCODES[MIN_REPEAT_ONE])
  171:                 skip = _len(code); emit(0)
  171:                 emit(av[0])
  171:                 emit(av[1])
  171:                 _compile(code, av[2], flags)
  171:                 emit(OPCODES[SUCCESS])
  171:                 code[skip] = _len(code) - skip
                   else:
   48:                 emit(OPCODES[REPEAT])
   48:                 skip = _len(code); emit(0)
   48:                 emit(av[0])
   48:                 emit(av[1])
   48:                 _compile(code, av[2], flags)
   48:                 code[skip] = _len(code) - skip
   48:                 if op is MAX_REPEAT:
   48:                     emit(OPCODES[MAX_UNTIL])
                       else:
                           emit(OPCODES[MIN_UNTIL])
  225:         elif op is SUBPATTERN:
  141:             if av[0]:
  105:                 emit(OPCODES[MARK])
  105:                 emit((av[0]-1)*2)
                   # _compile_info(code, av[1], flags)
  141:             _compile(code, av[1], flags)
  141:             if av[0]:
  105:                 emit(OPCODES[MARK])
  105:                 emit((av[0]-1)*2+1)
   84:         elif op in SUCCESS_CODES:
                   emit(OPCODES[op])
   84:         elif op in ASSERT_CODES:
    9:             emit(OPCODES[op])
    9:             skip = _len(code); emit(0)
    9:             if av[0] >= 0:
    6:                 emit(0) # look ahead
                   else:
    3:                 lo, hi = av[1].getwidth()
    3:                 if lo != hi:
                           raise error, "look-behind requires fixed-width pattern"
    3:                 emit(lo) # look behind
    9:             _compile(code, av[1], flags)
    9:             emit(OPCODES[SUCCESS])
    9:             code[skip] = _len(code) - skip
   75:         elif op is CALL:
                   emit(OPCODES[op])
                   skip = _len(code); emit(0)
                   _compile(code, av, flags)
                   emit(OPCODES[SUCCESS])
                   code[skip] = _len(code) - skip
   75:         elif op is AT:
   45:             emit(OPCODES[op])
   45:             if flags & SRE_FLAG_MULTILINE:
    3:                 av = AT_MULTILINE.get(av, av)
   45:             if flags & SRE_FLAG_LOCALE:
                       av = AT_LOCALE.get(av, av)
   45:             elif flags & SRE_FLAG_UNICODE:
    5:                 av = AT_UNICODE.get(av, av)
   45:             emit(ATCODES[av])
   30:         elif op is BRANCH:
   29:             emit(OPCODES[op])
   29:             tail = []
   29:             tailappend = tail.append
  130:             for av in av[1]:
  101:                 skip = _len(code); emit(0)
                       # _compile_info(code, av, flags)
  101:                 _compile(code, av, flags)
  101:                 emit(OPCODES[JUMP])
  101:                 tailappend(_len(code)); emit(0)
  101:                 code[skip] = _len(code) - skip
   29:             emit(0) # end of branch
  130:             for tail in tail:
  101:                 code[tail] = _len(code) - tail
    1:         elif op is CATEGORY:
                   emit(OPCODES[op])
                   if flags & SRE_FLAG_LOCALE:
                       av = CH_LOCALE[av]
                   elif flags & SRE_FLAG_UNICODE:
                       av = CH_UNICODE[av]
                   emit(CHCODES[av])
    1:         elif op is GROUPREF:
    1:             if flags & SRE_FLAG_IGNORECASE:
    1:                 emit(OPCODES[OP_IGNORE[op]])
                   else:
                       emit(OPCODES[op])
    1:             emit(av-1)
               elif op is GROUPREF_EXISTS:
                   emit(OPCODES[op])
                   emit(av[0]-1)
                   skipyes = _len(code); emit(0)
                   _compile(code, av[1], flags)
                   if av[2]:
                       emit(OPCODES[JUMP])
                       skipno = _len(code); emit(0)
                       code[skipyes] = _len(code) - skipyes + 1
                       _compile(code, av[2], flags)
                       code[skipno] = _len(code) - skipno
                   else:
                       code[skipyes] = _len(code) - skipyes + 1
               else:
                   raise ValueError, ("unsupported operand type", op)
       
       def _compile_charset(charset, flags, code, fixup=None):
           # compile charset subprogram
  231:     emit = code.append
  231:     if fixup is None:
   12:         fixup = _identityfunction
  573:     for op, av in _optimize_charset(charset, fixup):
  342:         emit(OPCODES[op])
  342:         if op is NEGATE:
   31:             pass
  311:         elif op is LITERAL:
  122:             emit(fixup(av))
  189:         elif op is RANGE:
   24:             emit(fixup(av[0]))
   24:             emit(fixup(av[1]))
  165:         elif op is CHARSET:
   36:             code.extend(av)
  129:         elif op is BIGCHARSET:
                   code.extend(av)
  129:         elif op is CATEGORY:
  129:             if flags & SRE_FLAG_LOCALE:
                       emit(CHCODES[CH_LOCALE[av]])
  129:             elif flags & SRE_FLAG_UNICODE:
   17:                 emit(CHCODES[CH_UNICODE[av]])
                   else:
  112:                 emit(CHCODES[av])
               else:
                   raise error, "internal: unsupported set operator"
  231:     emit(OPCODES[FAILURE])
       
       def _optimize_charset(charset, fixup):
           # internal: optimize character set
  231:     out = []
  231:     outappend = out.append
  231:     charmap = [0]*256
  231:     try:
  657:         for op, av in charset:
  554:             if op is NEGATE:
   31:                 outappend((op, av))
  523:             elif op is LITERAL:
  324:                 charmap[fixup(av)] = 1
  199:             elif op is RANGE:
 2014:                 for i in range(fixup(av[0]), fixup(av[1])+1):
 1943:                     charmap[i] = 1
  128:             elif op is CATEGORY:
                       # XXX: could append to charmap tail
  128:                 return charset # cannot compress
           except IndexError:
               # character set contains unicode characters
               return _optimize_unicode(charset, fixup)
           # compress character map
  103:     i = p = n = 0
  103:     runs = []
  103:     runsappend = runs.append
26471:     for c in charmap:
26368:         if c:
 2228:             if n == 0:
  270:                 p = i
 2228:             n = n + 1
24140:         elif n:
  268:             runsappend((p, n))
  268:             n = 0
26368:         i = i + 1
  103:     if n:
    2:         runsappend((p, n))
  103:     if len(runs) <= 2:
               # use literal/range
  182:         for p, n in runs:
  115:             if n == 1:
   93:                 outappend((LITERAL, p))
                   else:
   22:                 outappend((RANGE, (p, p+n-1)))
   67:         if len(out) < len(charset):
    5:             return out
           else:
               # use bitmap
   36:         data = _mk_bitmap(charmap)
   36:         outappend((CHARSET, data))
   36:         return out
   62:     return charset
       
       def _mk_bitmap(bits):
   36:     data = []
   36:     dataappend = data.append
   36:     if _sre.CODESIZE == 2:
               start = (1, 0)
           else:
   36:         start = (1L, 0L)
   36:     m, v = start
 9252:     for c in bits:
 9216:         if c:
 1189:             v = v + m
 9216:         m = m + m
 9216:         if m > MAXCODE:
  288:             dataappend(v)
  288:             m, v = start
   36:     return data
       
       # To represent a big charset, first a bitmap of all characters in the
       # set is constructed. Then, this bitmap is sliced into chunks of 256
       # characters, duplicate chunks are eliminated, and each chunk is
       # given a number. In the compiled expression, the charset is
       # represented by a 32-bit word sequence, consisting of one word for
       # the number of different chunks, a sequence of 256 bytes (64 words)
       # of chunk numbers indexed by their original chunk position, and a
       # sequence of 256-bit chunks (8 words each).
       
       # Compression is normally good: in a typical charset, large ranges of
       # Unicode will be either completely excluded (e.g. if only cyrillic
       # letters are to be matched), or completely included (e.g. if large
       # subranges of Kanji match). These ranges will be represented by
       # chunks of all one-bits or all zero-bits.
       
       # Matching can be also done efficiently: the more significant byte of
       # the Unicode character is an index into the chunk number, and the
       # less significant byte is a bit index in the chunk (just like the
       # CHARSET matching).
       
       # In UCS-4 mode, the BIGCHARSET opcode still supports only subsets
       # of the basic multilingual plane; an efficient representation
       # for all of Unicode has not yet been developed. This means,
       # in particular, that negated charsets cannot be represented as
       # bigcharsets.
       
       def _optimize_unicode(charset, fixup):
           try:
               import array
           except ImportError:
               return charset
           charmap = [0]*65536
           negate = 0
           try:
               for op, av in charset:
                   if op is NEGATE:
                       negate = 1
                   elif op is LITERAL:
                       charmap[fixup(av)] = 1
                   elif op is RANGE:
                       for i in xrange(fixup(av[0]), fixup(av[1])+1):
                           charmap[i] = 1
                   elif op is CATEGORY:
                       # XXX: could expand category
                       return charset # cannot compress
           except IndexError:
               # non-BMP characters
               return charset
           if negate:
               if sys.maxunicode != 65535:
                   # XXX: negation does not work with big charsets
                   return charset
               for i in xrange(65536):
                   charmap[i] = not charmap[i]
           comps = {}
           mapping = [0]*256
           block = 0
           data = []
           for i in xrange(256):
               chunk = tuple(charmap[i*256:(i+1)*256])
               new = comps.setdefault(chunk, block)
               mapping[i] = new
               if new == block:
                   block = block + 1
                   data = data + _mk_bitmap(chunk)
           header = [block]
           if _sre.CODESIZE == 2:
               code = 'H'
           else:
               code = 'I'
           # Convert block indices to byte array of 256 bytes
           mapping = array.array('B', mapping).tostring()
           # Convert byte array to word array
           mapping = array.array(code, mapping)
           assert mapping.itemsize == _sre.CODESIZE
           header = header + mapping.tolist()
           data[0:0] = header
           return [(BIGCHARSET, data)]
       
       def _simple(av):
           # check if av is a "simple" operator
  219:     lo, hi = av[2].getwidth()
  219:     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
       
       def _compile_info(code, pattern, flags):
           # internal: compile an info block.  in the current version,
           # this contains min/max pattern width, and an optional literal
           # prefix or a character map
   71:     lo, hi = pattern.getwidth()
   71:     if lo == 0:
    9:         return # not worth it
           # look for a literal prefix
   62:     prefix = []
   62:     prefixappend = prefix.append
   62:     prefix_skip = 0
   62:     charset = [] # not used
   62:     charsetappend = charset.append
   62:     if not (flags & SRE_FLAG_IGNORECASE):
               # look for literal prefix
   72:         for op, av in pattern.data:
   72:             if op is LITERAL:
   13:                 if len(prefix) == prefix_skip:
   13:                     prefix_skip = prefix_skip + 1
   13:                 prefixappend(av)
   59:             elif op is SUBPATTERN and len(av[1]) == 1:
   15:                 op, av = av[1][0]
   15:                 if op is LITERAL:
                           prefixappend(av)
                       else:
   15:                     break
                   else:
   44:                 break
               # if no prefix, look for charset prefix
   59:         if not prefix and pattern.data:
   46:             op, av = pattern.data[0]
   46:             if op is SUBPATTERN and av[1]:
   15:                 op, av = av[1][0]
   15:                 if op is LITERAL:
    1:                     charsetappend((op, av))
   14:                 elif op is BRANCH:
    5:                     c = []
    5:                     cappend = c.append
   36:                     for p in av[1]:
   33:                         if not p:
                                   break
   33:                         op, av = p[0]
   33:                         if op is LITERAL:
   31:                             cappend((op, av))
                               else:
    2:                             break
                           else:
    3:                         charset = c
   31:             elif op is BRANCH:
                       c = []
                       cappend = c.append
                       for p in av[1]:
                           if not p:
                               break
                           op, av = p[0]
                           if op is LITERAL:
                               cappend((op, av))
                           else:
                               break
                       else:
                           charset = c
   31:             elif op is IN:
    8:                 charset = av
       ##     if prefix:
       ##         print "*** PREFIX", prefix, prefix_skip
       ##     if charset:
       ##         print "*** CHARSET", charset
           # add an info block
   62:     emit = code.append
   62:     emit(OPCODES[INFO])
   62:     skip = len(code); emit(0)
           # literal flag
   62:     mask = 0
   62:     if prefix:
   13:         mask = SRE_INFO_PREFIX
   13:         if len(prefix) == prefix_skip == len(pattern.data):
                   mask = mask + SRE_INFO_LITERAL
   49:     elif charset:
   12:         mask = mask + SRE_INFO_CHARSET
   62:     emit(mask)
           # pattern length
   62:     if lo < MAXCODE:
   62:         emit(lo)
           else:
               emit(MAXCODE)
               prefix = prefix[:MAXCODE]
   62:     if hi < MAXCODE:
   20:         emit(hi)
           else:
   42:         emit(0)
           # add literal prefix
   62:     if prefix:
   13:         emit(len(prefix)) # length
   13:         emit(prefix_skip) # skip
   13:         code.extend(prefix)
               # generate overlap table
   13:         table = [-1] + ([0]*len(prefix))
   26:         for i in xrange(len(prefix)):
   13:             table[i+1] = table[i]+1
   13:             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
                       table[i+1] = table[table[i+1]-1]+1
   13:         code.extend(table[1:]) # don't store first entry
   49:     elif charset:
   12:         _compile_charset(charset, flags, code)
   62:     code[skip] = len(code) - skip
       
       try:
           unicode
       except NameError:
           STRING_TYPES = (type(""),)
       else:
           STRING_TYPES = (type(""), type(unicode("")))
       
       def isstring(obj):
  146:     for tp in STRING_TYPES:
  146:         if isinstance(obj, tp):
  142:             return 1
           return 0
       
       def _code(p, flags):
       
   71:     flags = p.pattern.flags | flags
   71:     code = []
       
           # compile info block
   71:     _compile_info(code, p, flags)
       
           # compile the pattern
   71:     _compile(code, p.data, flags)
       
   71:     code.append(OPCODES[SUCCESS])
       
   71:     return code
       
       def compile(p, flags=0):
           # internal: convert pattern list to internal format
       
   71:     if isstring(p):
   71:         pattern = p
   71:         p = sre_parse.parse(p, flags)
           else:
               pattern = None
       
   71:     code = _code(p, flags)
       
           # print code
       
           # XXX: <fl> get rid of this limitation!
   71:     if p.pattern.groups > 100:
               raise AssertionError(
                   "sorry, but this version only supports 100 named groups"
                   )
       
           # map in either direction
   71:     groupindex = p.pattern.groupdict
   71:     indexgroup = [None] * p.pattern.groups
  106:     for k, i in groupindex.items():
   35:         indexgroup[i] = k
       
   71:     return _sre.compile(
   71:         pattern, flags | p.pattern.flags, code,
   71:         p.pattern.groups-1,
   71:         groupindex, indexgroup
               )
